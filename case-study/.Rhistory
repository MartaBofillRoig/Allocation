res_report_H0$width_ci_a1[2] <- mean(width_ciopt_a1$width)
width_ciopt_a2 <- list_res_sym_H0[[2]] %>% filter(arm == "a2") %>% select(lower_ci, upper_ci, treat_effect)
width_ciopt_a2$width <- width_ciopt_a2$upper_ci - width_ciopt_a2$lower_ci
res_report_H0$width_ci_a2[2] <- mean(width_ciopt_a2$width)
# sqrt allocation
# H1
width_cisqrt_a1 <- list_res_sym_H1[[3]] %>% filter(arm == "a1") %>% select(lower_ci, upper_ci, treat_effect)
width_cisqrt_a1$width <- width_cisqrt_a1$upper_ci - width_cisqrt_a1$lower_ci
res_report_H1$width_ci_a1[3] <- mean(width_cisqrt_a1$width)
width_cisqrt_a2 <- list_res_sym_H1[[3]] %>% filter(arm == "a2") %>% select(lower_ci, upper_ci, treat_effect)
width_cisqrt_a2$width <- width_cisqrt_a2$upper_ci - width_cisqrt_a2$lower_ci
res_report_H1$width_ci_a2[3] <- mean(width_cisqrt_a2$width)
# H0
width_cisqrt_a1 <- list_res_sym_H0[[3]] %>% filter(arm == "a1") %>% select(lower_ci, upper_ci, treat_effect)
width_cisqrt_a1$width <- width_cisqrt_a1$upper_ci - width_cisqrt_a1$lower_ci
res_report_H0$width_ci_a1[3] <- mean(width_cisqrt_a1$width)
width_cisqrt_a2 <- list_res_sym_H0[[3]] %>% filter(arm == "a2") %>% select(lower_ci, upper_ci, treat_effect)
width_cisqrt_a2$width <- width_cisqrt_a2$upper_ci - width_cisqrt_a2$lower_ci
res_report_H0$width_ci_a2[3] <- mean(width_cisqrt_a2$width)
##########################################
# 3-periods nonsymmetric
##########################################
# list_res_H1 = list(y,y_opt,y_sqrt)
# one to one allocation
# H1
width_ci_a1 <- list_res_nsym_H1[[1]] %>% filter(arm == "a1") %>% select(lower_ci, upper_ci, treat_effect)
width_ci_a1$width <- width_ci_a1$upper_ci - width_ci_a1$lower_ci
res_report_H1$width_ci_a1[4] <- mean(width_ci_a1$width)
width_ci_a2 <- list_res_nsym_H1[[1]] %>% filter(arm == "a2") %>% select(lower_ci, upper_ci, treat_effect)
width_ci_a2$width <- width_ci_a2$upper_ci - width_ci_a2$lower_ci
res_report_H1$width_ci_a2[4] <-mean(width_ci_a2$width)
# H0
width_ci_a1 <- list_res_nsym_H0[[1]] %>% filter(arm == "a1") %>% select(lower_ci, upper_ci, treat_effect)
width_ci_a1$width <- width_ci_a1$upper_ci - width_ci_a1$lower_ci
res_report_H0$width_ci_a1[4] <-mean(width_ci_a1$width)
width_ci_a2 <- list_res_nsym_H0[[1]] %>% filter(arm == "a2") %>% select(lower_ci, upper_ci, treat_effect)
width_ci_a2$width <- width_ci_a2$upper_ci - width_ci_a2$lower_ci
res_report_H0$width_ci_a2[4] <-mean(width_ci_a2$width)
# opt allocation
# H1
width_ciopt_a1 <- list_res_nsym_H1[[2]] %>% filter(arm == "a1") %>% select(lower_ci, upper_ci, treat_effect)
width_ciopt_a1$width <- width_ciopt_a1$upper_ci - width_ciopt_a1$lower_ci
res_report_H1$width_ci_a1[5] <- mean(width_ciopt_a1$width)
width_ciopt_a2 <- list_res_nsym_H1[[2]] %>% filter(arm == "a2") %>% select(lower_ci, upper_ci, treat_effect)
width_ciopt_a2$width <- width_ciopt_a2$upper_ci - width_ciopt_a2$lower_ci
res_report_H1$width_ci_a2[5] <- mean(width_ciopt_a2$width)
# boxplot(width_ciopt_a1$width-width_ciopt_a2$width)
# H0
width_ciopt_a1 <- list_res_nsym_H0[[2]] %>% filter(arm == "a1") %>% select(lower_ci, upper_ci, treat_effect)
width_ciopt_a1$width <- width_ciopt_a1$upper_ci - width_ciopt_a1$lower_ci
res_report_H0$width_ci_a1[5] <- mean(width_ciopt_a1$width)
width_ciopt_a2 <- list_res_nsym_H0[[2]] %>% filter(arm == "a2") %>% select(lower_ci, upper_ci, treat_effect)
width_ciopt_a2$width <- width_ciopt_a2$upper_ci - width_ciopt_a2$lower_ci
res_report_H0$width_ci_a2[5] <- mean(width_ciopt_a2$width)
# sqrt allocation
# H1
width_cisqrt_a1 <- list_res_nsym_H1[[3]] %>% filter(arm == "a1") %>% select(lower_ci, upper_ci, treat_effect)
width_cisqrt_a1$width <- width_cisqrt_a1$upper_ci - width_cisqrt_a1$lower_ci
res_report_H1$width_ci_a1[6] <- mean(width_cisqrt_a1$width)
width_cisqrt_a2 <- list_res_nsym_H1[[3]] %>% filter(arm == "a2") %>% select(lower_ci, upper_ci, treat_effect)
width_cisqrt_a2$width <- width_cisqrt_a2$upper_ci - width_cisqrt_a2$lower_ci
res_report_H1$width_ci_a2[6] <- mean(width_cisqrt_a2$width)
# H0
width_cisqrt_a1 <- list_res_nsym_H0[[3]] %>% filter(arm == "a1") %>% select(lower_ci, upper_ci, treat_effect)
width_cisqrt_a1$width <- width_cisqrt_a1$upper_ci - width_cisqrt_a1$lower_ci
res_report_H0$width_ci_a1[6] <- mean(width_cisqrt_a1$width)
width_cisqrt_a2 <- list_res_nsym_H0[[3]] %>% filter(arm == "a2") %>% select(lower_ci, upper_ci, treat_effect)
width_cisqrt_a2$width <- width_cisqrt_a2$upper_ci - width_cisqrt_a2$lower_ci
res_report_H0$width_ci_a2[6] <- mean(width_cisqrt_a2$width)
##########################################
# Two periods
##########################################
# list_restwop_H0
# list_restwop_H1
# one to one allocation
# H1
width_ci_a1 <- list_restwop_H1[[1]] %>% filter(arm == "a1") %>% select(lower_ci, upper_ci, treat_effect)
width_ci_a1$width <- width_ci_a1$upper_ci - width_ci_a1$lower_ci
res_report_H1$width_ci_a1[7] <- mean(width_ci_a1$width)
width_ci_a2 <- list_restwop_H1[[1]] %>% filter(arm == "a2") %>% select(lower_ci, upper_ci, treat_effect)
width_ci_a2$width <- width_ci_a2$upper_ci - width_ci_a2$lower_ci
res_report_H1$width_ci_a2[7] <- mean(width_ci_a2$width)
# H0
width_ci_a1 <- list_restwop_H0[[1]] %>% filter(arm == "a1") %>% select(lower_ci, upper_ci, treat_effect)
width_ci_a1$width <- width_ci_a1$upper_ci - width_ci_a1$lower_ci
res_report_H0$width_ci_a1[7] <-mean(width_ci_a1$width)
width_ci_a2 <- list_restwop_H0[[1]] %>% filter(arm == "a2") %>% select(lower_ci, upper_ci, treat_effect)
width_ci_a2$width <- width_ci_a2$upper_ci - width_ci_a2$lower_ci
res_report_H0$width_ci_a2[7] <-mean(width_ci_a2$width)
# opt allocation
# H1
width_ciopt_a1 <- list_restwop_H1[[2]] %>% filter(arm == "a1") %>% select(lower_ci, upper_ci, treat_effect)
width_ciopt_a1$width <- width_ciopt_a1$upper_ci - width_ciopt_a1$lower_ci
res_report_H1$width_ci_a1[8] <- mean(width_ciopt_a1$width)
width_ciopt_a2 <- list_restwop_H1[[2]] %>% filter(arm == "a2") %>% select(lower_ci, upper_ci, treat_effect)
width_ciopt_a2$width <- width_ciopt_a2$upper_ci - width_ciopt_a2$lower_ci
res_report_H1$width_ci_a2[8] <- mean(width_ciopt_a2$width)
# H0
width_ciopt_a1 <- list_restwop_H0[[2]] %>% filter(arm == "a1") %>% select(lower_ci, upper_ci, treat_effect)
width_ciopt_a1$width <- width_ciopt_a1$upper_ci - width_ciopt_a1$lower_ci
res_report_H0$width_ci_a1[8] <- mean(width_ciopt_a1$width)
width_ciopt_a2 <- list_restwop_H0[[2]] %>% filter(arm == "a2") %>% select(lower_ci, upper_ci, treat_effect)
width_ciopt_a2$width <- width_ciopt_a2$upper_ci - width_ciopt_a2$lower_ci
res_report_H0$width_ci_a2[8] <- mean(width_ciopt_a2$width)
# sqrt allocation
# H1
width_cisqrt_a1 <- list_restwop_H1[[3]] %>% filter(arm == "a1") %>% select(lower_ci, upper_ci, treat_effect)
width_cisqrt_a1$width <- width_cisqrt_a1$upper_ci - width_cisqrt_a1$lower_ci
res_report_H1$width_ci_a1[9] <- mean(width_cisqrt_a1$width)
width_cisqrt_a2 <- list_restwop_H1[[3]] %>% filter(arm == "a2") %>% select(lower_ci, upper_ci, treat_effect)
width_cisqrt_a2$width <- width_cisqrt_a2$upper_ci - width_cisqrt_a2$lower_ci
res_report_H1$width_ci_a2[9] <- mean(width_cisqrt_a2$width)
# H0
width_cisqrt_a1 <- list_restwop_H0[[3]] %>% filter(arm == "a1") %>% select(lower_ci, upper_ci, treat_effect)
width_cisqrt_a1$width <- width_cisqrt_a1$upper_ci - width_cisqrt_a1$lower_ci
res_report_H0$width_ci_a1[9] <- mean(width_cisqrt_a1$width)
width_cisqrt_a2 <- list_restwop_H0[[3]] %>% filter(arm == "a2") %>% select(lower_ci, upper_ci, treat_effect)
width_cisqrt_a2$width <- width_cisqrt_a2$upper_ci - width_cisqrt_a2$lower_ci
res_report_H0$width_ci_a2[9] <- mean(width_cisqrt_a2$width)
##########################################
# summary tables
res_report_H1 <- df_res %>% filter(H0=="FALSE") #%>% select(rt_a1,rt_a2,var_e1,var_e2,r1,r2,alloc,minrt,design)
knitr::kable(res_report_H1, format = "markdown", caption = c("Power comparisons"), digits=3)
res_report_H1
res_report_H1
##########################################
# Optimal allocation
# Simulation study - results
# 2022-Nov
# Marta Bofill Roig
##########################################
rm(list = ls())
library(tidyverse)
load("C:/Users/mbofi/Dropbox/CeMSIIS/GitHub/Allocation/case-study/results/simstudy_completeresults_withvar_nov.RData")
df_res$design = ifelse(as.numeric(df_res$r1)+as.numeric(df_res$r2)==1,"2-period", "3-period")
df_res$r1 <- as.numeric(df_res$r1)
df_res$r2 <- as.numeric(df_res$r2)
df_res$rt_a1 <- as.numeric(df_res$rt_a1)
df_res$rt_a2 <- as.numeric(df_res$rt_a2)
df_res$var_e1 <- as.numeric(df_res$var_e1)
df_res$var_e2 <- as.numeric(df_res$var_e2)
# summary tables
res_report_H1 <- df_res %>% filter(H0=="FALSE") %>% select(rt_a1,rt_a2,var_e1,var_e2,r1,r2,alloc,minrt,design)
knitr::kable(res_report_H1, format = "markdown", caption = c("Power comparisons"), digits=3)
res_report_H0 <- df_res %>% filter(H0=="TRUE") %>% select(rt_a1,rt_a2,var_e1,var_e2,r1,r2,alloc,minrt,design)
knitr::kable(res_report_H0, format = "markdown", caption = c("Type 1 error rate"), digits=3)
res_report_H1$width_ci_a1 <- c(rep(NA,dim(res_report_H1)[1]))
res_report_H1$width_ci_a2 <- c(rep(NA,dim(res_report_H1)[1]))
res_report_H0$width_ci_a1 <- c(rep(NA,dim(res_report_H0)[1]))
res_report_H0$width_ci_a2 <- c(rep(NA,dim(res_report_H0)[1]))
##########################################
# 3-periods symmetric
##########################################
# list_res_H1 = list(y,y_opt,y_sqrt)
# one to one allocation
# H1
width_ci_a1 <- list_res_sym_H1[[1]] %>% filter(arm == "a1") %>% select(lower_ci, upper_ci, treat_effect)
width_ci_a1$width <- width_ci_a1$upper_ci - width_ci_a1$lower_ci
res_report_H1$width_ci_a1[1] <- mean(width_ci_a1$width)
width_ci_a2 <- list_res_sym_H1[[1]] %>% filter(arm == "a2") %>% select(lower_ci, upper_ci, treat_effect)
width_ci_a2$width <- width_ci_a2$upper_ci - width_ci_a2$lower_ci
res_report_H1$width_ci_a2[1] <- mean(width_ci_a2$width)
# boxplot(width_ci_a1$width-width_ci_a2$width)
# H0
width_ci_a1 <- list_res_sym_H0[[1]] %>% filter(arm == "a1") %>% select(lower_ci, upper_ci, treat_effect)
width_ci_a1$width <- width_ci_a1$upper_ci - width_ci_a1$lower_ci
res_report_H0$width_ci_a1[1] <-mean(width_ci_a1$width)
width_ci_a2 <- list_res_sym_H0[[1]] %>% filter(arm == "a2") %>% select(lower_ci, upper_ci, treat_effect)
width_ci_a2$width <- width_ci_a2$upper_ci - width_ci_a2$lower_ci
res_report_H0$width_ci_a2[1] <-mean(width_ci_a2$width)
# opt allocation
# H1
width_ciopt_a1 <- list_res_sym_H1[[2]] %>% filter(arm == "a1") %>% select(lower_ci, upper_ci, treat_effect)
width_ciopt_a1$width <- width_ciopt_a1$upper_ci - width_ciopt_a1$lower_ci
res_report_H1$width_ci_a1[2] <- mean(width_ciopt_a1$width)
width_ciopt_a2 <- list_res_sym_H1[[2]] %>% filter(arm == "a2") %>% select(lower_ci, upper_ci, treat_effect)
width_ciopt_a2$width <- width_ciopt_a2$upper_ci - width_ciopt_a2$lower_ci
res_report_H1$width_ci_a2[2] <- mean(width_ciopt_a2$width)
# boxplot(width_ciopt_a1$width-width_ciopt_a2$width)
# H0
width_ciopt_a1 <- list_res_sym_H0[[2]] %>% filter(arm == "a1") %>% select(lower_ci, upper_ci, treat_effect)
width_ciopt_a1$width <- width_ciopt_a1$upper_ci - width_ciopt_a1$lower_ci
res_report_H0$width_ci_a1[2] <- mean(width_ciopt_a1$width)
width_ciopt_a2 <- list_res_sym_H0[[2]] %>% filter(arm == "a2") %>% select(lower_ci, upper_ci, treat_effect)
width_ciopt_a2$width <- width_ciopt_a2$upper_ci - width_ciopt_a2$lower_ci
res_report_H0$width_ci_a2[2] <- mean(width_ciopt_a2$width)
# sqrt allocation
# H1
width_cisqrt_a1 <- list_res_sym_H1[[3]] %>% filter(arm == "a1") %>% select(lower_ci, upper_ci, treat_effect)
width_cisqrt_a1$width <- width_cisqrt_a1$upper_ci - width_cisqrt_a1$lower_ci
res_report_H1$width_ci_a1[3] <- mean(width_cisqrt_a1$width)
width_cisqrt_a2 <- list_res_sym_H1[[3]] %>% filter(arm == "a2") %>% select(lower_ci, upper_ci, treat_effect)
width_cisqrt_a2$width <- width_cisqrt_a2$upper_ci - width_cisqrt_a2$lower_ci
res_report_H1$width_ci_a2[3] <- mean(width_cisqrt_a2$width)
# H0
width_cisqrt_a1 <- list_res_sym_H0[[3]] %>% filter(arm == "a1") %>% select(lower_ci, upper_ci, treat_effect)
width_cisqrt_a1$width <- width_cisqrt_a1$upper_ci - width_cisqrt_a1$lower_ci
res_report_H0$width_ci_a1[3] <- mean(width_cisqrt_a1$width)
width_cisqrt_a2 <- list_res_sym_H0[[3]] %>% filter(arm == "a2") %>% select(lower_ci, upper_ci, treat_effect)
width_cisqrt_a2$width <- width_cisqrt_a2$upper_ci - width_cisqrt_a2$lower_ci
res_report_H0$width_ci_a2[3] <- mean(width_cisqrt_a2$width)
##########################################
# 3-periods nonsymmetric
##########################################
# list_res_H1 = list(y,y_opt,y_sqrt)
# one to one allocation
# H1
width_ci_a1 <- list_res_nsym_H1[[1]] %>% filter(arm == "a1") %>% select(lower_ci, upper_ci, treat_effect)
width_ci_a1$width <- width_ci_a1$upper_ci - width_ci_a1$lower_ci
res_report_H1$width_ci_a1[4] <- mean(width_ci_a1$width)
width_ci_a2 <- list_res_nsym_H1[[1]] %>% filter(arm == "a2") %>% select(lower_ci, upper_ci, treat_effect)
width_ci_a2$width <- width_ci_a2$upper_ci - width_ci_a2$lower_ci
res_report_H1$width_ci_a2[4] <-mean(width_ci_a2$width)
# H0
width_ci_a1 <- list_res_nsym_H0[[1]] %>% filter(arm == "a1") %>% select(lower_ci, upper_ci, treat_effect)
width_ci_a1$width <- width_ci_a1$upper_ci - width_ci_a1$lower_ci
res_report_H0$width_ci_a1[4] <-mean(width_ci_a1$width)
width_ci_a2 <- list_res_nsym_H0[[1]] %>% filter(arm == "a2") %>% select(lower_ci, upper_ci, treat_effect)
width_ci_a2$width <- width_ci_a2$upper_ci - width_ci_a2$lower_ci
res_report_H0$width_ci_a2[4] <-mean(width_ci_a2$width)
# opt allocation
# H1
width_ciopt_a1 <- list_res_nsym_H1[[2]] %>% filter(arm == "a1") %>% select(lower_ci, upper_ci, treat_effect)
width_ciopt_a1$width <- width_ciopt_a1$upper_ci - width_ciopt_a1$lower_ci
res_report_H1$width_ci_a1[5] <- mean(width_ciopt_a1$width)
width_ciopt_a2 <- list_res_nsym_H1[[2]] %>% filter(arm == "a2") %>% select(lower_ci, upper_ci, treat_effect)
width_ciopt_a2$width <- width_ciopt_a2$upper_ci - width_ciopt_a2$lower_ci
res_report_H1$width_ci_a2[5] <- mean(width_ciopt_a2$width)
# boxplot(width_ciopt_a1$width-width_ciopt_a2$width)
# H0
width_ciopt_a1 <- list_res_nsym_H0[[2]] %>% filter(arm == "a1") %>% select(lower_ci, upper_ci, treat_effect)
width_ciopt_a1$width <- width_ciopt_a1$upper_ci - width_ciopt_a1$lower_ci
res_report_H0$width_ci_a1[5] <- mean(width_ciopt_a1$width)
width_ciopt_a2 <- list_res_nsym_H0[[2]] %>% filter(arm == "a2") %>% select(lower_ci, upper_ci, treat_effect)
width_ciopt_a2$width <- width_ciopt_a2$upper_ci - width_ciopt_a2$lower_ci
res_report_H0$width_ci_a2[5] <- mean(width_ciopt_a2$width)
# sqrt allocation
# H1
width_cisqrt_a1 <- list_res_nsym_H1[[3]] %>% filter(arm == "a1") %>% select(lower_ci, upper_ci, treat_effect)
width_cisqrt_a1$width <- width_cisqrt_a1$upper_ci - width_cisqrt_a1$lower_ci
res_report_H1$width_ci_a1[6] <- mean(width_cisqrt_a1$width)
width_cisqrt_a2 <- list_res_nsym_H1[[3]] %>% filter(arm == "a2") %>% select(lower_ci, upper_ci, treat_effect)
width_cisqrt_a2$width <- width_cisqrt_a2$upper_ci - width_cisqrt_a2$lower_ci
res_report_H1$width_ci_a2[6] <- mean(width_cisqrt_a2$width)
# H0
width_cisqrt_a1 <- list_res_nsym_H0[[3]] %>% filter(arm == "a1") %>% select(lower_ci, upper_ci, treat_effect)
width_cisqrt_a1$width <- width_cisqrt_a1$upper_ci - width_cisqrt_a1$lower_ci
res_report_H0$width_ci_a1[6] <- mean(width_cisqrt_a1$width)
width_cisqrt_a2 <- list_res_nsym_H0[[3]] %>% filter(arm == "a2") %>% select(lower_ci, upper_ci, treat_effect)
width_cisqrt_a2$width <- width_cisqrt_a2$upper_ci - width_cisqrt_a2$lower_ci
res_report_H0$width_ci_a2[6] <- mean(width_cisqrt_a2$width)
##########################################
# Two periods
##########################################
# list_restwop_H0
# list_restwop_H1
# one to one allocation
# H1
width_ci_a1 <- list_restwop_H1[[1]] %>% filter(arm == "a1") %>% select(lower_ci, upper_ci, treat_effect)
width_ci_a1$width <- width_ci_a1$upper_ci - width_ci_a1$lower_ci
res_report_H1$width_ci_a1[7] <- mean(width_ci_a1$width)
width_ci_a2 <- list_restwop_H1[[1]] %>% filter(arm == "a2") %>% select(lower_ci, upper_ci, treat_effect)
width_ci_a2$width <- width_ci_a2$upper_ci - width_ci_a2$lower_ci
res_report_H1$width_ci_a2[7] <- mean(width_ci_a2$width)
# H0
width_ci_a1 <- list_restwop_H0[[1]] %>% filter(arm == "a1") %>% select(lower_ci, upper_ci, treat_effect)
width_ci_a1$width <- width_ci_a1$upper_ci - width_ci_a1$lower_ci
res_report_H0$width_ci_a1[7] <-mean(width_ci_a1$width)
width_ci_a2 <- list_restwop_H0[[1]] %>% filter(arm == "a2") %>% select(lower_ci, upper_ci, treat_effect)
width_ci_a2$width <- width_ci_a2$upper_ci - width_ci_a2$lower_ci
res_report_H0$width_ci_a2[7] <-mean(width_ci_a2$width)
# opt allocation
# H1
width_ciopt_a1 <- list_restwop_H1[[2]] %>% filter(arm == "a1") %>% select(lower_ci, upper_ci, treat_effect)
width_ciopt_a1$width <- width_ciopt_a1$upper_ci - width_ciopt_a1$lower_ci
res_report_H1$width_ci_a1[8] <- mean(width_ciopt_a1$width)
width_ciopt_a2 <- list_restwop_H1[[2]] %>% filter(arm == "a2") %>% select(lower_ci, upper_ci, treat_effect)
width_ciopt_a2$width <- width_ciopt_a2$upper_ci - width_ciopt_a2$lower_ci
res_report_H1$width_ci_a2[8] <- mean(width_ciopt_a2$width)
# H0
width_ciopt_a1 <- list_restwop_H0[[2]] %>% filter(arm == "a1") %>% select(lower_ci, upper_ci, treat_effect)
width_ciopt_a1$width <- width_ciopt_a1$upper_ci - width_ciopt_a1$lower_ci
res_report_H0$width_ci_a1[8] <- mean(width_ciopt_a1$width)
width_ciopt_a2 <- list_restwop_H0[[2]] %>% filter(arm == "a2") %>% select(lower_ci, upper_ci, treat_effect)
width_ciopt_a2$width <- width_ciopt_a2$upper_ci - width_ciopt_a2$lower_ci
res_report_H0$width_ci_a2[8] <- mean(width_ciopt_a2$width)
# sqrt allocation
# H1
width_cisqrt_a1 <- list_restwop_H1[[3]] %>% filter(arm == "a1") %>% select(lower_ci, upper_ci, treat_effect)
width_cisqrt_a1$width <- width_cisqrt_a1$upper_ci - width_cisqrt_a1$lower_ci
res_report_H1$width_ci_a1[9] <- mean(width_cisqrt_a1$width)
width_cisqrt_a2 <- list_restwop_H1[[3]] %>% filter(arm == "a2") %>% select(lower_ci, upper_ci, treat_effect)
width_cisqrt_a2$width <- width_cisqrt_a2$upper_ci - width_cisqrt_a2$lower_ci
res_report_H1$width_ci_a2[9] <- mean(width_cisqrt_a2$width)
# H0
width_cisqrt_a1 <- list_restwop_H0[[3]] %>% filter(arm == "a1") %>% select(lower_ci, upper_ci, treat_effect)
width_cisqrt_a1$width <- width_cisqrt_a1$upper_ci - width_cisqrt_a1$lower_ci
res_report_H0$width_ci_a1[9] <- mean(width_cisqrt_a1$width)
width_cisqrt_a2 <- list_restwop_H0[[3]] %>% filter(arm == "a2") %>% select(lower_ci, upper_ci, treat_effect)
width_cisqrt_a2$width <- width_cisqrt_a2$upper_ci - width_cisqrt_a2$lower_ci
res_report_H0$width_ci_a2[9] <- mean(width_cisqrt_a2$width)
##########################################
# summary tables
res_report_H1table <- df_res %>% filter(H0=="FALSE") #%>% select(rt_a1,rt_a2,var_e1,var_e2,r1,r2,alloc,minrt,design)
knitr::kable(res_report_H1table, format = "markdown", caption = c("Power comparisons"), digits=3)
res_report_H0
# res_report_H1table <- df_res %>% filter(H0=="FALSE") #%>% select(rt_a1,rt_a2,var_e1,var_e2,r1,r2,alloc,minrt,design)
knitr::kable(res_report_H0, format = "markdown", caption = c("Power comparisons"), digits=3)
# res_report_H1table <- df_res %>% filter(H0=="FALSE") #%>% select(rt_a1,rt_a2,var_e1,var_e2,r1,r2,alloc,minrt,design)
knitr::kable(res_report_H1, format = "markdown", caption = c("Power comparisons"), digits=3)
table_H1 <- res_report_H1[c(5:7, 9, 1:2, 10:11)]
table_H1
table_H1 <- res_report_H1[c(5:7, 9, 1:2, 10:11, 3:4)]
table_H1
knitr::kable(table_H1, format = "latex", caption = c("Power comparisons"), col.names = c("r1","r2", "Allocation", "Design", "T1E A1","T1E A2", "CI Width A1", "CI Width A2", "Variance A1", "Variance A2"), digits=3)
knitr::kable(table_H1, format = "markdown", caption = c("Power comparisons"), col.names = c("r1","r2", "Allocation", "Design", "T1E A1","T1E A2", "CI Width A1", "CI Width A2", "Variance A1", "Variance A2"), digits=3)
table_H1 <- res_report_H1[c(5:7, 9, 1:2, 10:11, 3:4)]
knitr::kable(table_H1, format = "markdown", caption = c("Power comparisons"), col.names = c("r1","r2", "Allocation", "Design", "T1E A1","T1E A2", "CI Width A1", "CI Width A2", "Variance A1", "Variance A2"), digits=3)
# res_report_H0table <- df_res %>% filter(H0=="TRUE") %>% select(rt_a1,rt_a2,var_e1,var_e2,r1,r2,alloc,minrt,design)
table_H0 <- res_report_H0[c(5:7, 9, 1:2, 10:11, 3:4)]
knitr::kable(table_H0, format = "markdown", caption = c("Type 1 error rate comparisons"), col.names = c("r1","r2", "Allocation", "Design", "Power A1","Power A2", "CI Width A1", "CI Width A2", "Variance A1", "Variance A2"), digits=3)
knitr::kable(table_H1, format = "latex", caption = c("Power comparisons"), col.names = c("r1","r2", "Allocation", "Design", "Power A1","Power A2", "CI Width A1", "CI Width A2", "Variance A1", "Variance A2"), digits=3)
table_H1 <- res_report_H1[c(5:7, 9, 1:2, 10:11, 3:4)]
knitr::kable(table_H1, format = "latex", caption = c("Power comparisons"), col.names = c("r1","r2", "Allocation", "Design", "Power A1","Power A2", "CI Width A1", "CI Width A2", "Variance A1", "Variance A2"), digits=3)
# res_report_H0table <- df_res %>% filter(H0=="TRUE") %>% select(rt_a1,rt_a2,var_e1,var_e2,r1,r2,alloc,minrt,design)
table_H0 <- res_report_H0[c(5:7, 9, 1:2, 10:11, 3:4)]
knitr::kable(table_H0, format = "latex", caption = c("Type 1 error rate comparisons"), col.names = c("r1","r2", "Allocation", "Design",  "T1E A1","T1E A2","CI Width A1", "CI Width A2", "Variance A1", "Variance A2"), digits=3)
rm(list = ls())
# Case 2 with non-concurrent controls
# Preliminar functions
Power=function(x,y)x^y
fr11 = function(r1){r1/2}
fr22 = function(r1){
1 - r1 +  sqrt(4*Power(-1 + r1,2) + (-22 + 43*r1 - 21*Power(r1,2))/4. + (-22 + 65*r1 - 64*Power(r1,2) + 21*Power(r1,3))/(12*(-1 + r1)) + (Power(2,0.3333333333333333)*(4 - 40*r1 + 129*Power(r1,2) - 196*Power(r1,3) + 154*Power(r1,4) - 60*Power(r1,5) + 9*Power(r1,6)))/ (3*(-1 + r1)*Power(1024 - 1536*r1 - 26112*Power(r1,2) + 135040*Power(r1,3) - 304896*Power(r1,4) + 391296*Power(r1,5) - 303104*Power(r1,6) + 139392*Power(r1,7) - 34560*Power(r1,8) + 3456*Power(r1,9) +  sqrt(28311552*r1 - 467140608*Power(r1,2) + 3588489216*Power(r1,3) - 16978083840*Power(r1,4) + 55228760064*Power(r1,5) - 130682585088*Power(r1,6) + 232168882176*Power(r1,7) - 315144732672*Power(r1,8) + 329334128640*Power(r1,9) - 264790867968*Power(r1,10) + 162331361280*Power(r1,11) - 74439917568*Power(r1,12) + 24680595456*Power(r1,13) - 5573836800*Power(r1,14) + 764411904*Power(r1,15) - 47775744*Power(r1,16)),0.3333333333333333)) + Power(1024 - 1536*r1 - 26112*Power(r1,2) + 135040*Power(r1,3) - 304896*Power(r1,4) + 391296*Power(r1,5) - 303104*Power(r1,6) + 139392*Power(r1,7) - 34560*Power(r1,8) +    3456*Power(r1,9) +  sqrt(28311552*r1 - 467140608*Power(r1,2) + 3588489216*Power(r1,3) - 16978083840*Power(r1,4) + 55228760064*Power(r1,5) - 130682585088*Power(r1,6) + 232168882176*Power(r1,7) - 315144732672*Power(r1,8) + 329334128640*Power(r1,9) - 264790867968*Power(r1,10) + 162331361280*Power(r1,11) - 74439917568*Power(r1,12) + 24680595456*Power(r1,13) - 5573836800*Power(r1,14) + 764411904*Power(r1,15) - 47775744*Power(r1,16)),0.3333333333333333)/(48*Power(2,0.3333333333333333)*(-1 + r1)))/2. -
sqrt(8*Power(-1 + r1,2) + (-22 + 43*r1 - 21*Power(r1,2))/4. - (-22 + 65*r1 - 64*Power(r1,2) + 21*Power(r1,3))/(12*(-1 + r1)) - (Power(2,0.3333333333333333)*(4 - 40*r1 + 129*Power(r1,2) - 196*Power(r1,3) + 154*Power(r1,4) - 60*Power(r1,5) + 9*Power(r1,6)))/(3*(-1 + r1)*Power(1024 - 1536*r1 - 26112*Power(r1,2) + 135040*Power(r1,3) - 304896*Power(r1,4) + 391296*Power(r1,5) - 303104*Power(r1,6) + 139392*Power(r1,7) - 34560*Power(r1,8) + 3456*Power(r1,9) +  sqrt(28311552*r1 - 467140608*Power(r1,2) + 3588489216*Power(r1,3) - 16978083840*Power(r1,4) + 55228760064*Power(r1,5) -    130682585088*Power(r1,6) + 232168882176*Power(r1,7) - 315144732672*Power(r1,8) + 329334128640*Power(r1,9) - 264790867968*Power(r1,10) + 162331361280*Power(r1,11) -  74439917568*Power(r1,12) + 24680595456*Power(r1,13) - 5573836800*Power(r1,14) + 764411904*Power(r1,15) - 47775744*Power(r1,16)),0.3333333333333333)) -  Power(1024 - 1536*r1 - 26112*Power(r1,2) + 135040*Power(r1,3) - 304896*Power(r1,4) + 391296*Power(r1,5) - 303104*Power(r1,6) + 139392*Power(r1,7) - 34560*Power(r1,8) +     3456*Power(r1,9) +  sqrt(28311552*r1 - 467140608*Power(r1,2) + 3588489216*Power(r1,3) - 16978083840*Power(r1,4) + 55228760064*Power(r1,5) - 130682585088*Power(r1,6) +  232168882176*Power(r1,7) - 315144732672*Power(r1,8) + 329334128640*Power(r1,9) - 264790867968*Power(r1,10) + 162331361280*Power(r1,11) - 74439917568*Power(r1,12) +  24680595456*Power(r1,13) - 5573836800*Power(r1,14) + 764411904*Power(r1,15) - 47775744*Power(r1,16)),0.3333333333333333)/(48*Power(2,0.3333333333333333)*(-1 + r1)) +   (-64*Power(-1 + r1,3) + 4*(-1 + r1)*(22 - 43*r1 + 21*Power(r1,2)) - 6*(-4 + 11*r1 - 10*Power(r1,2) + 3*Power(r1,3)))/  (4* sqrt(4*Power(-1 + r1,2) + (-22 + 43*r1 - 21*Power(r1,2))/4. + (-22 + 65*r1 - 64*Power(r1,2) + 21*Power(r1,3))/(12*(-1 + r1)) +  (Power(2,0.3333333333333333)*(4 - 40*r1 + 129*Power(r1,2) - 196*Power(r1,3) + 154*Power(r1,4) - 60*Power(r1,5) + 9*Power(r1,6)))/  (3*(-1 + r1)*Power(1024 - 1536*r1 - 26112*Power(r1,2) + 135040*Power(r1,3) - 304896*Power(r1,4) + 391296*Power(r1,5) - 303104*Power(r1,6) + 139392*Power(r1,7) -   34560*Power(r1,8) + 3456*Power(r1,9) +  sqrt(28311552*r1 - 467140608*Power(r1,2) + 3588489216*Power(r1,3) - 16978083840*Power(r1,4) + 55228760064*Power(r1,5) -      130682585088*Power(r1,6) + 232168882176*Power(r1,7) - 315144732672*Power(r1,8) + 329334128640*Power(r1,9) - 264790867968*Power(r1,10) + 162331361280*Power(r1,11) -  74439917568*Power(r1,12) + 24680595456*Power(r1,13) - 5573836800*Power(r1,14) + 764411904*Power(r1,15) - 47775744*Power(r1,16)),0.3333333333333333)) +  Power(1024 - 1536*r1 - 26112*Power(r1,2) + 135040*Power(r1,3) - 304896*Power(r1,4) + 391296*Power(r1,5) - 303104*Power(r1,6) + 139392*Power(r1,7) - 34560*Power(r1,8) +  3456*Power(r1,9) +  sqrt(28311552*r1 - 467140608*Power(r1,2) + 3588489216*Power(r1,3) - 16978083840*Power(r1,4) + 55228760064*Power(r1,5) - 130682585088*Power(r1,6) +   232168882176*Power(r1,7) - 315144732672*Power(r1,8) + 329334128640*Power(r1,9) - 264790867968*Power(r1,10) + 162331361280*Power(r1,11) - 74439917568*Power(r1,12) +  24680595456*Power(r1,13) - 5573836800*Power(r1,14) + 764411904*Power(r1,15) - 47775744*Power(r1,16)),0.3333333333333333)/(48*Power(2,0.3333333333333333)*(-1 + r1)))))/ 2
}
#
fr12 = function(r1,r11,r22){
(r1 - Power(r1,2) -  sqrt(r1)* sqrt(r1 - 2*Power(r1,2) + Power(r1,3) + 4*r1*r11 - 4*Power(r1,2)*r11 - 4*Power(r11,2) + 4*r1*Power(r11,2) - 4*r1*r22 + 4*Power(r1,2)*r22 +
4*r1*Power(r22,2)))/(2.*r1)
}
# Solutions
f=Vectorize(function(r1,r2) {
r22=fr22(r1)
r12=fr12(r1,r1/2,r22)
r02=r2-r12-r22
sol=c(r1,r2,r02,r12,r22)
sol
})
#
windows(width = 5, height = 5)
res=f(seq(0,0.5,0.01),1-seq(0,0.5,0.01))
# res=fr1(0.49)
plot(res[1,],res[3,]/res[2,],type="l",ylim=c(0,.5),xlim=c(0,.5),xlab=expression(r[1]),ylab="Allocation Ratios Period 2 as fraction of N2",main="Case 2 with NCC",lty=1)
lines(res[1,],res[4,]/res[2,],col="red")
lines(res[1,],res[5,]/res[2,],col="blue")
# Case 2
Power=function(x,y)x^y
eq=function(r22,r1=0.1,r2=0.8) (r1 + ((Power(r2,2) - 4*r2*r22 + 2*Power(r22,2))*Power(Power(r2,2) - 2*r2*r22 + 2*Power(r22,2),2))/(Power(r2,2)*Power(r2 - r22,3)) - (1-r1-r2))/4.
fr12=function(r22,r1=0.1,r2=0.8) (r2*(r2 - 2*r22))/(2*(r2 - r22))
f=Vectorize(function(r1,r2) {
r22=uniroot(eq,c(0,r2),r1=r1,r2=r2)$root
r12=fr12(r22,r1,r2)
r02=r2-r12-r22
sol=c(r1,r2,r02,r12,r22)
sol
})
windows(width = 5, height = 5)
res=f(seq(0,0.5,0.01),1-seq(0,0.5,0.01))
# res=fr1(0.49)
plot(res[1,],res[3,]/res[2,],type="l",ylim=c(0,.5),xlim=c(0,.5),xlab=expression(r[1]),ylab="Allocation Ratios Period 2 as fraction of N2",main="Case 2 without NCC",lty=1)
lines(res[1,],res[4,]/res[2,],col="red")
lines(res[1,],res[5,]/res[2,],col="blue")
# Case 2 with non-concurrent controls
# Preliminar functions
Power=function(x,y)x^y
fr11 = function(r1){r1/2}
fr22 = function(r1){
1 - r1 +  sqrt(4*Power(-1 + r1,2) + (-22 + 43*r1 - 21*Power(r1,2))/4. + (-22 + 65*r1 - 64*Power(r1,2) + 21*Power(r1,3))/(12*(-1 + r1)) + (Power(2,0.3333333333333333)*(4 - 40*r1 + 129*Power(r1,2) - 196*Power(r1,3) + 154*Power(r1,4) - 60*Power(r1,5) + 9*Power(r1,6)))/ (3*(-1 + r1)*Power(1024 - 1536*r1 - 26112*Power(r1,2) + 135040*Power(r1,3) - 304896*Power(r1,4) + 391296*Power(r1,5) - 303104*Power(r1,6) + 139392*Power(r1,7) - 34560*Power(r1,8) + 3456*Power(r1,9) +  sqrt(28311552*r1 - 467140608*Power(r1,2) + 3588489216*Power(r1,3) - 16978083840*Power(r1,4) + 55228760064*Power(r1,5) - 130682585088*Power(r1,6) + 232168882176*Power(r1,7) - 315144732672*Power(r1,8) + 329334128640*Power(r1,9) - 264790867968*Power(r1,10) + 162331361280*Power(r1,11) - 74439917568*Power(r1,12) + 24680595456*Power(r1,13) - 5573836800*Power(r1,14) + 764411904*Power(r1,15) - 47775744*Power(r1,16)),0.3333333333333333)) + Power(1024 - 1536*r1 - 26112*Power(r1,2) + 135040*Power(r1,3) - 304896*Power(r1,4) + 391296*Power(r1,5) - 303104*Power(r1,6) + 139392*Power(r1,7) - 34560*Power(r1,8) +    3456*Power(r1,9) +  sqrt(28311552*r1 - 467140608*Power(r1,2) + 3588489216*Power(r1,3) - 16978083840*Power(r1,4) + 55228760064*Power(r1,5) - 130682585088*Power(r1,6) + 232168882176*Power(r1,7) - 315144732672*Power(r1,8) + 329334128640*Power(r1,9) - 264790867968*Power(r1,10) + 162331361280*Power(r1,11) - 74439917568*Power(r1,12) + 24680595456*Power(r1,13) - 5573836800*Power(r1,14) + 764411904*Power(r1,15) - 47775744*Power(r1,16)),0.3333333333333333)/(48*Power(2,0.3333333333333333)*(-1 + r1)))/2. -
sqrt(8*Power(-1 + r1,2) + (-22 + 43*r1 - 21*Power(r1,2))/4. - (-22 + 65*r1 - 64*Power(r1,2) + 21*Power(r1,3))/(12*(-1 + r1)) - (Power(2,0.3333333333333333)*(4 - 40*r1 + 129*Power(r1,2) - 196*Power(r1,3) + 154*Power(r1,4) - 60*Power(r1,5) + 9*Power(r1,6)))/(3*(-1 + r1)*Power(1024 - 1536*r1 - 26112*Power(r1,2) + 135040*Power(r1,3) - 304896*Power(r1,4) + 391296*Power(r1,5) - 303104*Power(r1,6) + 139392*Power(r1,7) - 34560*Power(r1,8) + 3456*Power(r1,9) +  sqrt(28311552*r1 - 467140608*Power(r1,2) + 3588489216*Power(r1,3) - 16978083840*Power(r1,4) + 55228760064*Power(r1,5) -    130682585088*Power(r1,6) + 232168882176*Power(r1,7) - 315144732672*Power(r1,8) + 329334128640*Power(r1,9) - 264790867968*Power(r1,10) + 162331361280*Power(r1,11) -  74439917568*Power(r1,12) + 24680595456*Power(r1,13) - 5573836800*Power(r1,14) + 764411904*Power(r1,15) - 47775744*Power(r1,16)),0.3333333333333333)) -  Power(1024 - 1536*r1 - 26112*Power(r1,2) + 135040*Power(r1,3) - 304896*Power(r1,4) + 391296*Power(r1,5) - 303104*Power(r1,6) + 139392*Power(r1,7) - 34560*Power(r1,8) +     3456*Power(r1,9) +  sqrt(28311552*r1 - 467140608*Power(r1,2) + 3588489216*Power(r1,3) - 16978083840*Power(r1,4) + 55228760064*Power(r1,5) - 130682585088*Power(r1,6) +  232168882176*Power(r1,7) - 315144732672*Power(r1,8) + 329334128640*Power(r1,9) - 264790867968*Power(r1,10) + 162331361280*Power(r1,11) - 74439917568*Power(r1,12) +  24680595456*Power(r1,13) - 5573836800*Power(r1,14) + 764411904*Power(r1,15) - 47775744*Power(r1,16)),0.3333333333333333)/(48*Power(2,0.3333333333333333)*(-1 + r1)) +   (-64*Power(-1 + r1,3) + 4*(-1 + r1)*(22 - 43*r1 + 21*Power(r1,2)) - 6*(-4 + 11*r1 - 10*Power(r1,2) + 3*Power(r1,3)))/  (4* sqrt(4*Power(-1 + r1,2) + (-22 + 43*r1 - 21*Power(r1,2))/4. + (-22 + 65*r1 - 64*Power(r1,2) + 21*Power(r1,3))/(12*(-1 + r1)) +  (Power(2,0.3333333333333333)*(4 - 40*r1 + 129*Power(r1,2) - 196*Power(r1,3) + 154*Power(r1,4) - 60*Power(r1,5) + 9*Power(r1,6)))/  (3*(-1 + r1)*Power(1024 - 1536*r1 - 26112*Power(r1,2) + 135040*Power(r1,3) - 304896*Power(r1,4) + 391296*Power(r1,5) - 303104*Power(r1,6) + 139392*Power(r1,7) -   34560*Power(r1,8) + 3456*Power(r1,9) +  sqrt(28311552*r1 - 467140608*Power(r1,2) + 3588489216*Power(r1,3) - 16978083840*Power(r1,4) + 55228760064*Power(r1,5) -      130682585088*Power(r1,6) + 232168882176*Power(r1,7) - 315144732672*Power(r1,8) + 329334128640*Power(r1,9) - 264790867968*Power(r1,10) + 162331361280*Power(r1,11) -  74439917568*Power(r1,12) + 24680595456*Power(r1,13) - 5573836800*Power(r1,14) + 764411904*Power(r1,15) - 47775744*Power(r1,16)),0.3333333333333333)) +  Power(1024 - 1536*r1 - 26112*Power(r1,2) + 135040*Power(r1,3) - 304896*Power(r1,4) + 391296*Power(r1,5) - 303104*Power(r1,6) + 139392*Power(r1,7) - 34560*Power(r1,8) +  3456*Power(r1,9) +  sqrt(28311552*r1 - 467140608*Power(r1,2) + 3588489216*Power(r1,3) - 16978083840*Power(r1,4) + 55228760064*Power(r1,5) - 130682585088*Power(r1,6) +   232168882176*Power(r1,7) - 315144732672*Power(r1,8) + 329334128640*Power(r1,9) - 264790867968*Power(r1,10) + 162331361280*Power(r1,11) - 74439917568*Power(r1,12) +  24680595456*Power(r1,13) - 5573836800*Power(r1,14) + 764411904*Power(r1,15) - 47775744*Power(r1,16)),0.3333333333333333)/(48*Power(2,0.3333333333333333)*(-1 + r1)))))/ 2
}
#
fr12 = function(r1,r11,r22){
(r1 - Power(r1,2) -  sqrt(r1)* sqrt(r1 - 2*Power(r1,2) + Power(r1,3) + 4*r1*r11 - 4*Power(r1,2)*r11 - 4*Power(r11,2) + 4*r1*Power(r11,2) - 4*r1*r22 + 4*Power(r1,2)*r22 +
4*r1*Power(r22,2)))/(2.*r1)
}
# Solutions
f=Vectorize(function(r1,r2) {
r22=fr22(r1)
r12=fr12(r1,r1/2,r22)
r02=r2-r12-r22
sol=c(r1,r2,r02,r12,r22)
sol
})
#
windows(width = 5, height = 5)
res_ncc=f(seq(0,0.5,0.01),1-seq(0,0.5,0.01))
# res=fr1(0.49)
plot(res_ncc[1,],res_ncc[3,]/res_ncc[2,],type="l",ylim=c(0,.5),xlim=c(0,.5),xlab=expression(r[1]),ylab="Allocation Ratios Period 2 as fraction of N2",main="Case 2 with NCC",lty=1)
lines(res_ncc[1,],res_ncc[4,]/res_ncc[2,],col="red")
lines(res_ncc[1,],res_ncc[5,]/res_ncc[2,],col="blue")
eq_cc=function(r22,r1=0.1,r2=0.8) (r1 + ((Power(r2,2) - 4*r2*r22 + 2*Power(r22,2))*Power(Power(r2,2) - 2*r2*r22 + 2*Power(r22,2),2))/(Power(r2,2)*Power(r2 - r22,3)) - (1-r1-r2))/4.
fr12_cc=function(r22,r1=0.1,r2=0.8) (r2*(r2 - 2*r22))/(2*(r2 - r22))
f_cc=Vectorize(function(r1,r2) {
r22=uniroot(eq_cc,c(0,r2),r1=r1,r2=r2)$root
r12=fr12_cc(r22,r1,r2)
r02=r2-r12-r22
sol=c(r1,r2,r02,r12,r22)
sol
})
# windows(width = 5, height = 5)
res=f_cc(seq(0,0.5,0.01),1-seq(0,0.5,0.01))
# res=fr1(0.49)
# plot(res[1,],res[3,]/res[2,],type="l",ylim=c(0,.5),xlim=c(0,.5),xlab=expression(r[1]),ylab="Allocation Ratios Period 2 as fraction of N2",main="Case 2 without NCC",lty=1)
lines(res[1,],res[4,]/res[2,],col="red",lty=2)
lines(res[1,],res[5,]/res[2,],col="blue",lty=2)
lines(res[1,],res[3,]/res[2,],col="black",lty=2)
# Case 2 with non-concurrent controls
# Preliminar functions
Power=function(x,y)x^y
fr11 = function(r1){r1/2}
fr22 = function(r1){
1 - r1 +  sqrt(4*Power(-1 + r1,2) + (-22 + 43*r1 - 21*Power(r1,2))/4. + (-22 + 65*r1 - 64*Power(r1,2) + 21*Power(r1,3))/(12*(-1 + r1)) + (Power(2,0.3333333333333333)*(4 - 40*r1 + 129*Power(r1,2) - 196*Power(r1,3) + 154*Power(r1,4) - 60*Power(r1,5) + 9*Power(r1,6)))/ (3*(-1 + r1)*Power(1024 - 1536*r1 - 26112*Power(r1,2) + 135040*Power(r1,3) - 304896*Power(r1,4) + 391296*Power(r1,5) - 303104*Power(r1,6) + 139392*Power(r1,7) - 34560*Power(r1,8) + 3456*Power(r1,9) +  sqrt(28311552*r1 - 467140608*Power(r1,2) + 3588489216*Power(r1,3) - 16978083840*Power(r1,4) + 55228760064*Power(r1,5) - 130682585088*Power(r1,6) + 232168882176*Power(r1,7) - 315144732672*Power(r1,8) + 329334128640*Power(r1,9) - 264790867968*Power(r1,10) + 162331361280*Power(r1,11) - 74439917568*Power(r1,12) + 24680595456*Power(r1,13) - 5573836800*Power(r1,14) + 764411904*Power(r1,15) - 47775744*Power(r1,16)),0.3333333333333333)) + Power(1024 - 1536*r1 - 26112*Power(r1,2) + 135040*Power(r1,3) - 304896*Power(r1,4) + 391296*Power(r1,5) - 303104*Power(r1,6) + 139392*Power(r1,7) - 34560*Power(r1,8) +    3456*Power(r1,9) +  sqrt(28311552*r1 - 467140608*Power(r1,2) + 3588489216*Power(r1,3) - 16978083840*Power(r1,4) + 55228760064*Power(r1,5) - 130682585088*Power(r1,6) + 232168882176*Power(r1,7) - 315144732672*Power(r1,8) + 329334128640*Power(r1,9) - 264790867968*Power(r1,10) + 162331361280*Power(r1,11) - 74439917568*Power(r1,12) + 24680595456*Power(r1,13) - 5573836800*Power(r1,14) + 764411904*Power(r1,15) - 47775744*Power(r1,16)),0.3333333333333333)/(48*Power(2,0.3333333333333333)*(-1 + r1)))/2. -
sqrt(8*Power(-1 + r1,2) + (-22 + 43*r1 - 21*Power(r1,2))/4. - (-22 + 65*r1 - 64*Power(r1,2) + 21*Power(r1,3))/(12*(-1 + r1)) - (Power(2,0.3333333333333333)*(4 - 40*r1 + 129*Power(r1,2) - 196*Power(r1,3) + 154*Power(r1,4) - 60*Power(r1,5) + 9*Power(r1,6)))/(3*(-1 + r1)*Power(1024 - 1536*r1 - 26112*Power(r1,2) + 135040*Power(r1,3) - 304896*Power(r1,4) + 391296*Power(r1,5) - 303104*Power(r1,6) + 139392*Power(r1,7) - 34560*Power(r1,8) + 3456*Power(r1,9) +  sqrt(28311552*r1 - 467140608*Power(r1,2) + 3588489216*Power(r1,3) - 16978083840*Power(r1,4) + 55228760064*Power(r1,5) -    130682585088*Power(r1,6) + 232168882176*Power(r1,7) - 315144732672*Power(r1,8) + 329334128640*Power(r1,9) - 264790867968*Power(r1,10) + 162331361280*Power(r1,11) -  74439917568*Power(r1,12) + 24680595456*Power(r1,13) - 5573836800*Power(r1,14) + 764411904*Power(r1,15) - 47775744*Power(r1,16)),0.3333333333333333)) -  Power(1024 - 1536*r1 - 26112*Power(r1,2) + 135040*Power(r1,3) - 304896*Power(r1,4) + 391296*Power(r1,5) - 303104*Power(r1,6) + 139392*Power(r1,7) - 34560*Power(r1,8) +     3456*Power(r1,9) +  sqrt(28311552*r1 - 467140608*Power(r1,2) + 3588489216*Power(r1,3) - 16978083840*Power(r1,4) + 55228760064*Power(r1,5) - 130682585088*Power(r1,6) +  232168882176*Power(r1,7) - 315144732672*Power(r1,8) + 329334128640*Power(r1,9) - 264790867968*Power(r1,10) + 162331361280*Power(r1,11) - 74439917568*Power(r1,12) +  24680595456*Power(r1,13) - 5573836800*Power(r1,14) + 764411904*Power(r1,15) - 47775744*Power(r1,16)),0.3333333333333333)/(48*Power(2,0.3333333333333333)*(-1 + r1)) +   (-64*Power(-1 + r1,3) + 4*(-1 + r1)*(22 - 43*r1 + 21*Power(r1,2)) - 6*(-4 + 11*r1 - 10*Power(r1,2) + 3*Power(r1,3)))/  (4* sqrt(4*Power(-1 + r1,2) + (-22 + 43*r1 - 21*Power(r1,2))/4. + (-22 + 65*r1 - 64*Power(r1,2) + 21*Power(r1,3))/(12*(-1 + r1)) +  (Power(2,0.3333333333333333)*(4 - 40*r1 + 129*Power(r1,2) - 196*Power(r1,3) + 154*Power(r1,4) - 60*Power(r1,5) + 9*Power(r1,6)))/  (3*(-1 + r1)*Power(1024 - 1536*r1 - 26112*Power(r1,2) + 135040*Power(r1,3) - 304896*Power(r1,4) + 391296*Power(r1,5) - 303104*Power(r1,6) + 139392*Power(r1,7) -   34560*Power(r1,8) + 3456*Power(r1,9) +  sqrt(28311552*r1 - 467140608*Power(r1,2) + 3588489216*Power(r1,3) - 16978083840*Power(r1,4) + 55228760064*Power(r1,5) -      130682585088*Power(r1,6) + 232168882176*Power(r1,7) - 315144732672*Power(r1,8) + 329334128640*Power(r1,9) - 264790867968*Power(r1,10) + 162331361280*Power(r1,11) -  74439917568*Power(r1,12) + 24680595456*Power(r1,13) - 5573836800*Power(r1,14) + 764411904*Power(r1,15) - 47775744*Power(r1,16)),0.3333333333333333)) +  Power(1024 - 1536*r1 - 26112*Power(r1,2) + 135040*Power(r1,3) - 304896*Power(r1,4) + 391296*Power(r1,5) - 303104*Power(r1,6) + 139392*Power(r1,7) - 34560*Power(r1,8) +  3456*Power(r1,9) +  sqrt(28311552*r1 - 467140608*Power(r1,2) + 3588489216*Power(r1,3) - 16978083840*Power(r1,4) + 55228760064*Power(r1,5) - 130682585088*Power(r1,6) +   232168882176*Power(r1,7) - 315144732672*Power(r1,8) + 329334128640*Power(r1,9) - 264790867968*Power(r1,10) + 162331361280*Power(r1,11) - 74439917568*Power(r1,12) +  24680595456*Power(r1,13) - 5573836800*Power(r1,14) + 764411904*Power(r1,15) - 47775744*Power(r1,16)),0.3333333333333333)/(48*Power(2,0.3333333333333333)*(-1 + r1)))))/ 2
}
#
fr12 = function(r1,r11,r22){
(r1 - Power(r1,2) -  sqrt(r1)* sqrt(r1 - 2*Power(r1,2) + Power(r1,3) + 4*r1*r11 - 4*Power(r1,2)*r11 - 4*Power(r11,2) + 4*r1*Power(r11,2) - 4*r1*r22 + 4*Power(r1,2)*r22 +
4*r1*Power(r22,2)))/(2.*r1)
}
# Solutions
f=Vectorize(function(r1,r2) {
r22=fr22(r1)
r12=fr12(r1,r1/2,r22)
r02=r2-r12-r22
sol=c(r1,r2,r02,r12,r22)
sol
})
#
windows(width = 5, height = 5)
res_ncc=f(seq(0,0.5,0.01),1-seq(0,0.5,0.01))
# res=fr1(0.49)
plot(res_ncc[1,],res_ncc[3,]/res_ncc[2,],type="l",ylim=c(0,.5),xlim=c(0,.5),xlab=expression(r[1]),ylab="Allocation Ratios Period 2 as fraction of N2",main="Case 2 with NCC",lty=2)
lines(res_ncc[1,],res_ncc[4,]/res_ncc[2,],col="red",lty=2)
lines(res_ncc[1,],res_ncc[5,]/res_ncc[2,],col="blue",lty=2)
eq_cc=function(r22,r1=0.1,r2=0.8) (r1 + ((Power(r2,2) - 4*r2*r22 + 2*Power(r22,2))*Power(Power(r2,2) - 2*r2*r22 + 2*Power(r22,2),2))/(Power(r2,2)*Power(r2 - r22,3)) - (1-r1-r2))/4.
fr12_cc=function(r22,r1=0.1,r2=0.8) (r2*(r2 - 2*r22))/(2*(r2 - r22))
f_cc=Vectorize(function(r1,r2) {
r22=uniroot(eq_cc,c(0,r2),r1=r1,r2=r2)$root
r12=fr12_cc(r22,r1,r2)
r02=r2-r12-r22
sol=c(r1,r2,r02,r12,r22)
sol
})
# windows(width = 5, height = 5)
res=f_cc(seq(0,0.5,0.01),1-seq(0,0.5,0.01))
# res=fr1(0.49)
# plot(res[1,],res[3,]/res[2,],type="l",ylim=c(0,.5),xlim=c(0,.5),xlab=expression(r[1]),ylab="Allocation Ratios Period 2 as fraction of N2",main="Case 2 without NCC",lty=1)
lines(res[1,],res[4,]/res[2,],col="red",lty=1)
lines(res[1,],res[5,]/res[2,],col="blue",lty=1)
lines(res[1,],res[3,]/res[2,],col="black",lty=1)
# Case 2 with non-concurrent controls
# Preliminar functions
Power=function(x,y)x^y
fr11 = function(r1){r1/2}
fr22 = function(r1){
1 - r1 +  sqrt(4*Power(-1 + r1,2) + (-22 + 43*r1 - 21*Power(r1,2))/4. + (-22 + 65*r1 - 64*Power(r1,2) + 21*Power(r1,3))/(12*(-1 + r1)) + (Power(2,0.3333333333333333)*(4 - 40*r1 + 129*Power(r1,2) - 196*Power(r1,3) + 154*Power(r1,4) - 60*Power(r1,5) + 9*Power(r1,6)))/ (3*(-1 + r1)*Power(1024 - 1536*r1 - 26112*Power(r1,2) + 135040*Power(r1,3) - 304896*Power(r1,4) + 391296*Power(r1,5) - 303104*Power(r1,6) + 139392*Power(r1,7) - 34560*Power(r1,8) + 3456*Power(r1,9) +  sqrt(28311552*r1 - 467140608*Power(r1,2) + 3588489216*Power(r1,3) - 16978083840*Power(r1,4) + 55228760064*Power(r1,5) - 130682585088*Power(r1,6) + 232168882176*Power(r1,7) - 315144732672*Power(r1,8) + 329334128640*Power(r1,9) - 264790867968*Power(r1,10) + 162331361280*Power(r1,11) - 74439917568*Power(r1,12) + 24680595456*Power(r1,13) - 5573836800*Power(r1,14) + 764411904*Power(r1,15) - 47775744*Power(r1,16)),0.3333333333333333)) + Power(1024 - 1536*r1 - 26112*Power(r1,2) + 135040*Power(r1,3) - 304896*Power(r1,4) + 391296*Power(r1,5) - 303104*Power(r1,6) + 139392*Power(r1,7) - 34560*Power(r1,8) +    3456*Power(r1,9) +  sqrt(28311552*r1 - 467140608*Power(r1,2) + 3588489216*Power(r1,3) - 16978083840*Power(r1,4) + 55228760064*Power(r1,5) - 130682585088*Power(r1,6) + 232168882176*Power(r1,7) - 315144732672*Power(r1,8) + 329334128640*Power(r1,9) - 264790867968*Power(r1,10) + 162331361280*Power(r1,11) - 74439917568*Power(r1,12) + 24680595456*Power(r1,13) - 5573836800*Power(r1,14) + 764411904*Power(r1,15) - 47775744*Power(r1,16)),0.3333333333333333)/(48*Power(2,0.3333333333333333)*(-1 + r1)))/2. -
sqrt(8*Power(-1 + r1,2) + (-22 + 43*r1 - 21*Power(r1,2))/4. - (-22 + 65*r1 - 64*Power(r1,2) + 21*Power(r1,3))/(12*(-1 + r1)) - (Power(2,0.3333333333333333)*(4 - 40*r1 + 129*Power(r1,2) - 196*Power(r1,3) + 154*Power(r1,4) - 60*Power(r1,5) + 9*Power(r1,6)))/(3*(-1 + r1)*Power(1024 - 1536*r1 - 26112*Power(r1,2) + 135040*Power(r1,3) - 304896*Power(r1,4) + 391296*Power(r1,5) - 303104*Power(r1,6) + 139392*Power(r1,7) - 34560*Power(r1,8) + 3456*Power(r1,9) +  sqrt(28311552*r1 - 467140608*Power(r1,2) + 3588489216*Power(r1,3) - 16978083840*Power(r1,4) + 55228760064*Power(r1,5) -    130682585088*Power(r1,6) + 232168882176*Power(r1,7) - 315144732672*Power(r1,8) + 329334128640*Power(r1,9) - 264790867968*Power(r1,10) + 162331361280*Power(r1,11) -  74439917568*Power(r1,12) + 24680595456*Power(r1,13) - 5573836800*Power(r1,14) + 764411904*Power(r1,15) - 47775744*Power(r1,16)),0.3333333333333333)) -  Power(1024 - 1536*r1 - 26112*Power(r1,2) + 135040*Power(r1,3) - 304896*Power(r1,4) + 391296*Power(r1,5) - 303104*Power(r1,6) + 139392*Power(r1,7) - 34560*Power(r1,8) +     3456*Power(r1,9) +  sqrt(28311552*r1 - 467140608*Power(r1,2) + 3588489216*Power(r1,3) - 16978083840*Power(r1,4) + 55228760064*Power(r1,5) - 130682585088*Power(r1,6) +  232168882176*Power(r1,7) - 315144732672*Power(r1,8) + 329334128640*Power(r1,9) - 264790867968*Power(r1,10) + 162331361280*Power(r1,11) - 74439917568*Power(r1,12) +  24680595456*Power(r1,13) - 5573836800*Power(r1,14) + 764411904*Power(r1,15) - 47775744*Power(r1,16)),0.3333333333333333)/(48*Power(2,0.3333333333333333)*(-1 + r1)) +   (-64*Power(-1 + r1,3) + 4*(-1 + r1)*(22 - 43*r1 + 21*Power(r1,2)) - 6*(-4 + 11*r1 - 10*Power(r1,2) + 3*Power(r1,3)))/  (4* sqrt(4*Power(-1 + r1,2) + (-22 + 43*r1 - 21*Power(r1,2))/4. + (-22 + 65*r1 - 64*Power(r1,2) + 21*Power(r1,3))/(12*(-1 + r1)) +  (Power(2,0.3333333333333333)*(4 - 40*r1 + 129*Power(r1,2) - 196*Power(r1,3) + 154*Power(r1,4) - 60*Power(r1,5) + 9*Power(r1,6)))/  (3*(-1 + r1)*Power(1024 - 1536*r1 - 26112*Power(r1,2) + 135040*Power(r1,3) - 304896*Power(r1,4) + 391296*Power(r1,5) - 303104*Power(r1,6) + 139392*Power(r1,7) -   34560*Power(r1,8) + 3456*Power(r1,9) +  sqrt(28311552*r1 - 467140608*Power(r1,2) + 3588489216*Power(r1,3) - 16978083840*Power(r1,4) + 55228760064*Power(r1,5) -      130682585088*Power(r1,6) + 232168882176*Power(r1,7) - 315144732672*Power(r1,8) + 329334128640*Power(r1,9) - 264790867968*Power(r1,10) + 162331361280*Power(r1,11) -  74439917568*Power(r1,12) + 24680595456*Power(r1,13) - 5573836800*Power(r1,14) + 764411904*Power(r1,15) - 47775744*Power(r1,16)),0.3333333333333333)) +  Power(1024 - 1536*r1 - 26112*Power(r1,2) + 135040*Power(r1,3) - 304896*Power(r1,4) + 391296*Power(r1,5) - 303104*Power(r1,6) + 139392*Power(r1,7) - 34560*Power(r1,8) +  3456*Power(r1,9) +  sqrt(28311552*r1 - 467140608*Power(r1,2) + 3588489216*Power(r1,3) - 16978083840*Power(r1,4) + 55228760064*Power(r1,5) - 130682585088*Power(r1,6) +   232168882176*Power(r1,7) - 315144732672*Power(r1,8) + 329334128640*Power(r1,9) - 264790867968*Power(r1,10) + 162331361280*Power(r1,11) - 74439917568*Power(r1,12) +  24680595456*Power(r1,13) - 5573836800*Power(r1,14) + 764411904*Power(r1,15) - 47775744*Power(r1,16)),0.3333333333333333)/(48*Power(2,0.3333333333333333)*(-1 + r1)))))/ 2
}
#
fr12 = function(r1,r11,r22){
(r1 - Power(r1,2) -  sqrt(r1)* sqrt(r1 - 2*Power(r1,2) + Power(r1,3) + 4*r1*r11 - 4*Power(r1,2)*r11 - 4*Power(r11,2) + 4*r1*Power(r11,2) - 4*r1*r22 + 4*Power(r1,2)*r22 +
4*r1*Power(r22,2)))/(2.*r1)
}
eq_cc=function(r22,r1=0.1,r2=0.8) (r1 + ((Power(r2,2) - 4*r2*r22 + 2*Power(r22,2))*Power(Power(r2,2) - 2*r2*r22 + 2*Power(r22,2),2))/(Power(r2,2)*Power(r2 - r22,3)) - (1-r1-r2))/4.
fr12_cc=function(r22,r1=0.1,r2=0.8) (r2*(r2 - 2*r22))/(2*(r2 - r22))
f_cc=Vectorize(function(r1,r2) {
r22=uniroot(eq_cc,c(0,r2),r1=r1,r2=r2)$root
r12=fr12_cc(r22,r1,r2)
r02=r2-r12-r22
sol=c(r1,r2,r02,r12,r22)
sol
})
# Solutions
f=Vectorize(function(r1,r2) {
r22=fr22(r1)
r12=fr12(r1,r1/2,r22)
r02=r2-r12-r22
sol=c(r1,r2,r02,r12,r22)
sol
})
#
windows(width = 5, height = 5)
res_ncc=f(seq(0,0.5,0.01),1-seq(0,0.5,0.01))
# res=fr1(0.49)
plot(res_ncc[1,],res_ncc[3,]/res_ncc[2,],type="l",ylim=c(0,.5),xlim=c(0,.5),xlab=expression(r[1]),ylab="Allocation Ratios Period 2 as fraction of N2",main="Case 2 with NCC",lty=2)
lines(res_ncc[1,],res_ncc[4,]/res_ncc[2,],col="red",lty=2)
lines(res_ncc[1,],res_ncc[5,]/res_ncc[2,],col="blue",lty=2)
res=f_cc(seq(0,0.5,0.01),1-seq(0,0.5,0.01))
lines(res[1,],res[4,]/res[2,],col="red",lty=1)
lines(res[1,],res[5,]/res[2,],col="blue",lty=1)
lines(res[1,],res[3,]/res[2,],col="black",lty=1)
windows(width = 5, height = 5)
res_ncc=f(seq(0,0.5,0.01),1-seq(0,0.5,0.01))
# res=fr1(0.49)
plot(res_ncc[1,],res_ncc[3,]/res_ncc[2,],type="l",ylim=c(0,.5),xlim=c(0,.5),xlab=expression(r[1]),ylab="Allocation Ratios Period 2",lty=2)
lines(res_ncc[1,],res_ncc[4,]/res_ncc[2,],col="red",lty=2)
lines(res_ncc[1,],res_ncc[5,]/res_ncc[2,],col="blue",lty=2)
res=f_cc(seq(0,0.5,0.01),1-seq(0,0.5,0.01))
lines(res[1,],res[4,]/res[2,],col="red",lty=1)
lines(res[1,],res[5,]/res[2,],col="blue",lty=1)
lines(res[1,],res[3,]/res[2,],col="black",lty=1)
